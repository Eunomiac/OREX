export declare const U: {
    getTemplatePath: (fileRelativePath: string) => string;
    GMID: () => string | false;
    isNumber: (ref: unknown) => ref is number;
    isList: (ref: unknown) => ref is anyList;
    isArray: (ref: unknown) => ref is anyArray;
    isInt: (ref: unknown) => ref is int;
    isFloat: (ref: unknown) => ref is float;
    isPosInt: (ref: unknown) => ref is posInt;
    isIterable: (ref: unknown) => ref is Iterable<unknown>;
    isHTMLCode: (ref: unknown) => ref is HTMLCode;
    isUndefined: (ref: unknown) => ref is undefined;
    isDefined: (ref: unknown) => ref is unknown;
    isEmpty: (ref: any) => boolean;
    hasItems: (ref: any) => boolean;
    areEqual: (...refs: anyArray) => boolean;
    pFloat: (ref: unknown, sigDigits?: any, isStrict?: boolean) => number;
    pInt: (ref: unknown, isStrict?: boolean) => number;
    radToDeg: (rad: number, isConstrained?: boolean) => number;
    degToRad: (deg: number, isConstrained?: boolean) => number;
    testRegExp: (str: stringLike, patterns?: (string | RegExp)[], flags?: string, isTestingAll?: boolean) => boolean;
    regExtract: (ref: stringLike, pattern: string | RegExp, flags?: string) => string | string[] | undefined;
    uCase: (str: stringLike) => string;
    lCase: (str: stringLike) => string;
    sCase: (str: stringLike) => string;
    tCase: (str: stringLike) => string;
    hyphenate: (str: stringLike) => string;
    unhyphenate: (str: stringLike) => string;
    pluralize: (singular: string, num: number, plural?: string | undefined) => string;
    oxfordize: (items: (string | number)[], useOxfordComma?: boolean) => string;
    ellipsize: (text: stringLike, maxLength: number) => string;
    parseArticles: (str: stringLike) => string;
    signNum: (num: int, delim?: string) => string;
    padNum: (num: number, numDecDigits: int) => string;
    stringifyNum: (num: string | number) => string;
    verbalizeNum: (num: string | number) => string;
    ordinalizeNum: (num: string | number, isReturningWords?: boolean) => string;
    romanizeNum: (num: number, isUsingGroupedChars?: boolean) => string;
    loremIpsum: (numWords?: number) => string;
    randWord: (numWords?: number, wordList?: string[]) => string;
    isIn: (needle: stringLike, haystack?: stringLike[], fuzziness?: number) => any;
    isInExact: (needle: stringLike, haystack: stringLike[]) => any;
    randNum: (min: number, max: number, snap?: number) => number;
    randInt: (min: number, max: number) => number;
    coinFlip: () => boolean;
    cycleNum: (num: number, [min, max]?: [(number | undefined)?, (number | undefined)?]) => number;
    cycleAngle: (angle: number) => number;
    roundNum: (num: number, sigDigits?: number) => number;
    getDistance: ({x: x1, y: y1}: point, {x: x2, y: y2}: point) => number;
    getAngle: ({x: x1, y: y1}: point, {x: x2, y: y2}: point, {x: xO, y: yO}?: point) => number;
    getAngleDelta: (angleStart: number, angleEnd: number) => number;
    randElem: (array: anyArray) => unknown;
    randIndex: (array: anyArray) => posInt;
    makeCycler: (array: anyArray, index?: number) => Generator<unknown, any, unknown>;
    getLast: (array: anyArray) => any;
    unique: (array: anyArray) => anyArray;
    removeFirst: (array: anyArray, element: unknown) => any;
    pullElement: (array: anyArray, checkFunc?: (_v?: unknown, _i?: number, _a?: anyArray) => void) => any;
    pullIndex: (array: anyArray, index: number) => any;
    remove: (obj: any, searchFunc: sFunc) => any;
    replace: (obj: any, searchFunc: sFunc, repVal: unknown) => boolean;
    partition: (obj: any, predicate?: (val: unknown, key: unknown) => boolean) => [any, any];
    objMap: (obj: any, keyFunc: any, valFunc?: any) => any;
    objFilter: <Type>(obj: Type, keyFunc: any, valFunc?: any) => Type extends anyList ? anyList : anyArray;
    objForEach: (obj: anyList, func: (val: unknown, key?: string | number | undefined) => void) => void;
    objCompact: <Type_1>(obj: Type_1, preserve?: stringLike[]) => Type_1 extends anyList ? anyList : anyArray;
    objClone: <Type_2>(obj: Type_2, isStrictlySafe?: boolean) => Type_2;
    objMerge: <Type_3>(target: Type_3, source: DeepPartial<Type_3>, {isMutatingOk, isStrictlySafe}?: {
        isMutatingOk?: boolean | undefined;
        isStrictlySafe?: boolean | undefined;
    }) => Type_3;
    objExpand: (obj: anyList) => anyList;
    objFlatten: (obj: anyList) => anyList;
    getDynamicFunc: (funcName: string, func: (...args: anyArray) => unknown, context: object) => false | ((...args: stringLike[]) => unknown);
    gsap: typeof gsap;
    get: {
        (target: gsap.TweenTarget, property: string, unit: string): number;
        (target: gsap.TweenTarget, property: string): string | number;
    };
    set: (targets: gsap.TweenTarget, vars: gsap.TweenVars) => gsap.core.Tween;
    getRawCirclePath: (r: number, {x: xO, y: yO}?: point) => (string | number)[][];
    drawCirclePath: (radius: number, origin: point) => string;
    formatAsClass: (str: string) => string;
    getGSAngleDelta: (startAngle: number, endAngle: number) => string;
};
export {default as C} from "../helpers/config.js";
export {default as gsap, Draggable as Dragger, InertiaPlugin, MotionPathPlugin, GSDevTools, RoughEase} from "gsap/all";
export {default as preloadTemplates} from "../helpers/templates.js";
export {default as XRoll} from "../xclasses/xroll.js";
export {default as XElem} from "../xclasses/xelem.js";
export {default as XItem} from "../xclasses/xitem.js";
export {default as XGroup} from "../xclasses/xgroup.js";
export {default as XDie} from "../xclasses/xdie.js";
