import{C as t,U as s,XItem as e}from"../helpers/bundler.js";class r extends e{constructor(t,s){super({id:`${s.id}-arm-${s.t.size}`,parent:s,i:{set:{height:2,rotation:0,width:0,transformOrigin:"0% 50%",top:"50%",left:"50%"}}}),this.o=t,this.h(t,!1)}static get u(){return s.p(super.u,{l:["x-arm"]})}async initialize(){return await super.initialize()?(this.o.set({right:-1*this.o.width}),this.h(this.o,!1),this.o.g()):Promise.resolve(!1)}}export default class i extends e{static get u(){return s.p(super.u,{l:["x-group"]})}get parent(){return super.parent}set parent(t){super.parent=t}}export class XPool extends i{constructor({m:s,...e}){super(e),this.O=[],this.P=new Map,s=s??{...t.X},this.I=new Map(Object.entries(s)),this.I.forEach(((t,s)=>{this.P.set(s,new XOrbit(s,t,this))}))}static get u(){return s.p(super.u,{l:["x-pool"]})}get m(){return this.P}get A(){return Array.from(Object.values(this.m))}get $(){return this.A.map((t=>t.j())).flat()}async R(t,s){const e=this.m.get(s);return e instanceof XOrbit&&await e.initialize()?e.R(t):Promise.resolve(!1)}}export class XOrbit extends i{constructor(t,s,e){super({id:t,parent:e,i:{set:{M:-50,U:-50,height:e.height,width:e.width,left:.5*e.width,top:.5*e.height}}});const r=this;this.to({rotation:"+=360",repeat:-1,duration:10*s,k:"none",q(){r.$.forEach((t=>{t.parent?.v&&t.set({rotation:-1*t.parent.global.rotation})}))}}),this.B=s}static get u(){return s.p(super.u,{l:["x-orbit"]})}get C(){return Array.from(this.t)}get $(){return this.C.map((t=>t.o))}get D(){return.5*this.weight*this.parent.width}get weight(){return this.B}set weight(t){this.B=t,this.F&&this.G()}G(){console.log(`[${this.id}] Updating Arms`,this.C);const t=360/this.C.length;this.C.forEach(((s,e)=>{s.to({width:this.D,rotation:t*e,delay:.2*e,k:"power2.inOut",duration:1})}))}async R(t,s=0){console.log(`[${this.id}] Adding XItem: ${t.id}`);const e=new r(t,this);return await e.initialize()?(this.G(),Promise.resolve(!0)):Promise.resolve(!1)}async H(t){const s=t.map(((t,s)=>{const e=new r(t,this);return this.h(e),e.initialize()}));return await Promise.allSettled(s)?(this.G(),Promise.resolve(!0)):Promise.resolve(!1)}}