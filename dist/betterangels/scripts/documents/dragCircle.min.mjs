/* ▌██░░ betterangels v0.0.1-prealpha (2021) ║ MIT License ║ https://github.com/Eunomiac/betterangels ░░██▐ */import U from"../helpers/utilities.mjs";import gsap,{Draggable as Dragger,InertiaPlugin as Inertia}from"/scripts/greensock/esm/all.js";class RollCircle{static get REGISTRY(){return this._REGISTRY=this._REGISTRY??{}}static get TYPES(){return{basic:"basic"}}static get CONTAINER(){return this._CONTAINER=this._CONTAINER??"#rollCircleContainer"??this.CreateContainer()}static Get(e,t,i=1){return this.REGISTRY[`${e}_${t}_${i}`]}static CreateContainer(){return $('<div id="rollCircleContainer" />').appendTo(".vtt.game")[0]}static Register(e){this.REGISTRY[e.name]=e}constructor({x:e,y:t},i,s=[],{owner:r,type:n,dice:{num:c,types:l}}={}){this._x=e,this._y=t,this._r=i,this._cssClasses=["roll-circle",...s],this._owner=r??U.GMID,this._type=n??RollCircle.TYPES.basic,this._name=`${this._owner}_${this._type}_${Object.keys(RollCircle.REGISTRY).filter((e=>new RegExp(`${this._owner}_${this._type}_`).test(e))).length+1}`,RollCircle.Register(this),this.create(),this.addDice(c,l)}get x(){return this._x}get y(){return this._y}get radius(){return this._r}get height(){return 2*this.radius}get width(){return 2*this.radius}get cssClasses(){return this._cssClasses}get owner(){return game.users.get(this._owner)}get type(){return this._type}get name(){return this._name}get id(){return`rollCircle-${this.name}`}get snapID(){return`snapCircle-${this.name}`}get rollCircle(){return this._rollCircle}get snapCircle(){return $(`#${this.id} .snap-circle`)[0]}get diceElems(){return $(`#${this.id} .ore-die`)}create(){[this._rollCircle]=$(`\n    <div id="${this.id}" class="${this.cssClasses.join(" ")}" style="height: ${this.height}px; width: ${this.width}px;">\n      <svg height="100%" width="100%">\n        <circle cx="${this.radius}" cy="${this.radius}" r="${this.radius}" stroke="none" />\n        <circle class="snap-circle" cx="${this.radius}" cy="${this.radius}" r="${.8*this.radius}" fill="none" stroke="none" />\n      </svg>\n    </div>\n    `).appendTo(RollCircle.CONTAINER),this.setCircle({xPercent:-50,yPercent:-50,x:this.x,y:this.y}),this.setSnapCircle({xPercent:-50,yPercent:-50})}setCircle(e){U.set(this.rollCircle,e)}setSnapCircle(e){U.set(this.snapCircle,e)}distributeDice(){const e=.8*this.radius,t=360/(this.childDice.length+1);let i=0;this.childDice.forEach((s=>{i+=t,G.set(s.elem,{xPercent:-50,yPercent:-50,x:e*Math.cos(i*(Math.PI/180)),y:e*Math.sin(i*(Math.PI/180))})}))}}class OREDie{static get REGISTRY(){return this._REGISTRY=this._REGISTRY??{},this._REGISTRY}static RegisterDie(e,t){const i=Object.keys(this.REGISTRY).length+1;e.id=`die-${i}`,e.homeCircle=t,this.REGISTRY[e.id]=e}constructor(e){OREDie.RegisterDie(this,e),this.draw()}draw(){[this.elem]=$(`<circle id="${this.id}" r="30px" stroke="#FFFFFF" fill="lime">&nbsp;</circle>`).appendTo(this.homeCircle.elem),G.set(this.elem,{xPercent:-50,yPercent:-50,transformOrigin:"50% 50%"})}}export default()=>{gsap.registerPlugin(Dragger,Inertia),[[{x:100,y:100},100,"lime"],[{x:1100,y:100},100,"cyan"],[{x:600,y:750},100,"pink"]].forEach((e=>{const t=new RollCircle(...e);for(let e=0;e<6;e++)t.initDie();t.distributeDice()}))};