import{gsap as t,Dragger as e,InertiaPlugin as s,MotionPathPlugin as n,GSDevTools as i,U as a,XElem as r,XCircle as c,XItem as o,XDie as d,XSnap as h}from"./bundler.mjs";export default new class{constructor(){[this.t]=$('<div id="dbContainer" class="db x-container" />').appendTo(".vtt.game")}get i(){return this.t}o(t){this.h=t}l(t){this.g&&this.g.$.p("db-flagged"),t.$.u("db-flagged"),this.g=t}m(){this.D.forEach(this.v),this.P()}k(){this.D.forEach(this.A),this.I()}get D(){return this.S=this.S??[]}F(e){return{[`${e.id}Straightener`](){t.set(`#${e.id} .db.angle-marker`,{rotation:-1*e.rotation})}}[`${e.id}Straightener`]}B(t){this.D.includes(t)||(this.D.push(t),this.v(t))}M(t){this.S=this.D.filter((e=>e.name!==t.name)),this.A(t)}v(e,s=4,i=!1){[e.U]=$(`\n    <svg height="100%" width="100%">\n      <path id="db-${e.id}" class="db snap-circle" fill="none" stroke="none" d="m 100 -20 c 66.3 0 120 53.7 120 120 c 0 66.3 -53.7 120 -120 120 c -66.3 0 -120 -53.7 -120 -120 c 0 -66.3 53.7 -120 120 -120 z"></path>\n      <circle id="db-${e.id}" class="db snap-circle" cx="${e.N}" cy="${e.N}" r="${1.25*e.N}" fill="none" stroke="none" />\n    </svg>\n    `).appendTo(this.i),t.set(e.U,{O:-50,R:-50,x:e.x,y:e.y}),e.W=n.j(`#db-${e.id}`),n.H(e.W);const a=(s,i=!0)=>{e.T=e.T??{};const a=Math.round(100*t.q.normalize(-180,180,s))/100,{x:r,y:c,angle:o}=n.G(e.W,a,!0);[e.T[s]]=$(i?`<div class="db angle-marker">${parseInt(o)}<br>${a}</div>`:`<div class="db angle-marker small-marker">${parseInt(o)}</div>`).appendTo(e.J),t.set(e.T[s],{x:r,y:c,O:-50,R:-50,rotation:-1*e.rotation})};this.A(e),i?[...Array(s)].map(((e,n)=>t.q.K(0,s,-180,180,n))).forEach((t=>a(t,!0))):a(0,!1),e.L=this.F(e),t.V.add(e.L)}A(e){t.V.remove(e.L),$(`#${e.id} .angle-marker`).remove()}X(t,e=0,s=null){(s=s??(this.Y=this.Y??r.Z.find((t=>t instanceof c))))&&([s._[t],s._[e]]=[s._[e],s._[t]],s.tt(),s.et(10))}get st(){return this.nt=this.nt??[]}it(t){const e=this;return{[`${t.id}DieUpdater`](){t._.forEach((t=>{if(t instanceof d){const s=['<table class="db db-display">'];e.st.forEach((e=>{const n=["<tr>"];e.forEach((s=>{let i=t[s]??i;"number"==typeof i&&(i=Math.abs(i)<1?`${i<0?"-":""}.${a.rt(100*i)}`:1===Math.abs(i)?(i<0?"-":"")+"1.0":a.rt(i)),n.push(`<td class="db db-data" colspan="${3-e.length}">${i}</td>`)})),n.push("</tr>"),s.push(n.join(""))})),s.push("</table>"),t.ct=s.join("")}}))}}[`${t.id}DieUpdater`]}ot(t){this.st.push([t].flat())}dt(e){e._.forEach((t=>{t instanceof d&&t.$.u("db-display")})),e.ht=this.it(e),t.V.add(e.ht)}lt(e){e._.forEach((t=>{t instanceof d&&(t.$.p("db-display"),t.$.p("db-flagged"),t.ct(t.slot))})),t.V.remove(e.ht)}ping({x:e,y:s},i,{N:a=20,color:r="yellow"}={}){const[c]=$(`<svg class="db" height="100%" width="100%">\n      <circle cx="${a}" cy="${a}" r="${a}" fill="${r}" stroke="none" />\n    </svg>`).appendTo(this.i).children().last();if(i){const[t]=$(i);({x:e,y:s}=n.gt(t,this.i.J,{x:e,y:s}))}t.set(c,{O:-50,R:-50,transformOrigin:"50% 50%",x:e,y:s}),t.to(c,{opacity:1,scale:1,$t:{opacity:.25,scale:5},duration:1,bt:"bounce",yt(){t.to(c,{opacity:.5,scale:.25,duration:10,delay:5,bt:"sine"})}})}xt(t){const e=[0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1].map((e=>{const{x:s,y:i,angle:a}=n.G(t.ut.path,e,!0),c=t.ft(r.Dt,{x:s,y:i});return{vt:{x:parseInt(s),y:parseInt(i)},wt:{x:parseInt(c.x),y:parseInt(c.y)},angle:parseInt(a),Pt:e}}));console.log(e)}};